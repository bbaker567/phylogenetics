from Bio import AlignIO
from Bio import SeqIO
import pandas as pd

# Alignments, must in clustal format
HalosOnly = AlignIO.read("/Users/brittanybaker/Dropbox/PhD_2020/other_mags/AAfreq_alignment/192taxa/48Halophiles_bmge0.6_NM.aln", "clustal")
NonHalosOnly = AlignIO.read("/Users/brittanybaker/Dropbox/PhD_2020/other_mags/AAfreq_alignment/192taxa/144NonHalophiles_bmge0.6_NM.aln", "clustal")

# Converts alignment into a dataframe where rows are taxa and columns are AA positions
HalosOnly_df = pd.DataFrame(HalosOnly)
NonHalosOnly_df = pd.DataFrame(NonHalosOnly)

### For halophiles alignment
# Applies the value_counts function to the entire dataframe
HalosOnly_AlnPos_df = HalosOnly_df.apply(pd.value_counts)
# Parses the dataframe by the amino acid specified and add each column
DE_HalosOnly_AlnPos_df = HalosOnly_AlnPos_df.loc[["E", "D"]]
DE_HalosOnly_AlnPos_df.loc['DE_Halos_Total']= DE_HalosOnly_AlnPos_df.sum()
# We only want to keep columns that contain at least 10% of species
DE_HalosOnly_AlnPos_df = DE_HalosOnly_AlnPos_df.mask(DE_HalosOnly_AlnPos_df < 5)
# Parses the dataframe by the amino acid specified and add each column
IK_HalosOnly_AlnPos_df = HalosOnly_AlnPos_df.loc[["I", "K"]]
IK_HalosOnly_AlnPos_df.loc['IK_Halos_Total']= IK_HalosOnly_AlnPos_df.sum()
# We only want to keep columns that contain at least 10% of species
IK_HalosOnly_AlnPos_df = IK_HalosOnly_AlnPos_df.mask(IK_HalosOnly_AlnPos_df < 5)
#print(IK_HalosOnly_AlnPos_df)


### For non halophiles alignment
# Applies the value_counts function to the entire dataframe
NonHalosOnly_AlnPos_df = NonHalosOnly_df.apply(pd.value_counts)
# Parses the dataframe by the amino acid specified and add each column
DE_NonHalosOnly_AlnPos_df = NonHalosOnly_AlnPos_df.loc[["E", "D"]]
DE_NonHalosOnly_AlnPos_df.loc['DE_NonHalos_Total']= DE_NonHalosOnly_AlnPos_df.sum()
# We only want to keep columns that contain at least 10% of species
DE_NonHalosOnly_AlnPos_df = DE_NonHalosOnly_AlnPos_df.mask(DE_NonHalosOnly_AlnPos_df < 6)
# Parses the dataframe by the amino acid specified and add each column
IK_NonHalosOnly_AlnPos_df = NonHalosOnly_AlnPos_df.loc[["I", "K"]]
IK_NonHalosOnly_AlnPos_df.loc['IK_NonHalos_Total']= IK_NonHalosOnly_AlnPos_df.sum()
# We only want to keep columns that contain at least 10% of species
IK_NonHalosOnly_AlnPos_df = IK_NonHalosOnly_AlnPos_df.mask(IK_NonHalosOnly_AlnPos_df < 6)
#print(IK_NonHalosOnly_AlnPos_df)

### For halophiles
# Dividing DE by IK
# Replaced NA with 0
Halo_df_list = [DE_HalosOnly_AlnPos_df, IK_HalosOnly_AlnPos_df]
Halophiles_DE_IK_seperate = pd.concat([d.iloc[-1:] for d in Halo_df_list], ignore_index=False).fillna(0).astype(int)
# Changing 0 to 0.1 in IK row
Halophiles_DE_IK_seperate.iloc[1, :] = Halophiles_DE_IK_seperate.replace(0, 0.1).bfill().iloc[1, :]
# Division
Halophiles_DE_IK_seperate.loc['Halos_DE/IK'] = Halophiles_DE_IK_seperate.loc['DE_Halos_Total'] / Halophiles_DE_IK_seperate.loc['IK_Halos_Total']
#print(Halophiles_DE_IK_seperate)

### For non halophiles
# Dividing DE by IK
NonHalo_df_list = [DE_NonHalosOnly_AlnPos_df, IK_NonHalosOnly_AlnPos_df]
NonHalophiles_DE_IK_seperate = pd.concat([d.iloc[-1:] for d in NonHalo_df_list], ignore_index=False).fillna(0).astype(int)
# Changing 0 to 0.1 in IK row
NonHalophiles_DE_IK_seperate.iloc[1, :] = NonHalophiles_DE_IK_seperate.replace(0, 0.1).bfill().iloc[1, :]
# Division
NonHalophiles_DE_IK_seperate.loc['NonHalos_DE/IK'] = NonHalophiles_DE_IK_seperate.loc['DE_NonHalos_Total'] / NonHalophiles_DE_IK_seperate.loc['IK_NonHalos_Total']
#print(NonHalophiles_DE_IK_seperate)

### Dataframe of D+E/I+K for halophiles and D+E/I+K for non halophiles
all_df_list = [Halophiles_DE_IK_seperate, NonHalophiles_DE_IK_seperate]
all_df = pd.concat([d.iloc[-1:] for d in all_df_list], ignore_index=False).fillna(0)
# Changing 0 to 0.1 in non halophiles row
all_df.iloc[1, :] = all_df.replace(0, 0.1).bfill().iloc[1, :]
# Divide D+E/I+K for halophiles and D+E/I+K for non halophiles
final_df = all_df.loc['Halos_DE/IK'] / all_df.loc['NonHalos_DE/IK']
col_names = ["Ratios"]
final_df = pd.DataFrame(final_df, columns = col_names)
rslt_df = final_df.sort_values(by = 'Ratios', ascending = False)
# Changes a dataframe into a series so I can parse it easier
rslt_series = rslt_df.squeeze()
# Keeps percentage of hits I specify from the largest number
sites_to_remove_series = rslt_series.nlargest(n = int(7872), keep = 'first') # Change this number for the 
#print(sites_to_remove_series)

# Need to convert index of series into a list of columns to remove
sites_to_remove_list = sites_to_remove_series.index.to_list()
#print(sites_to_remove_list)

## Remove columns of the alignment based on the list above - same for both alignments
#### Halophiles
Halos_align_sites_removed_df = HalosOnly_df.drop(columns = sites_to_remove_list)
#print(Halos_align_sites_removed_df)

#### Non halophiles
NonHalos_align_sites_removed_df = NonHalosOnly_df.drop(columns = sites_to_remove_list)
#print(NonHalos_align_sites_removed_df)

# Assigning the species name to the row for the fasta file headers
Halos_headers = ["DPANN_Halophile_DAL-9Gt_90_72C1R_74G","DPANN_Halophile_DAL-9Gt_91_54C12R_51G","DPANN_Halophile_DAL-9Gt_91_54C5R_51G","DPANN_Halophile_DAL-Ass_36_69C3R_Archaea_31G","DPANN_Halophile_DAL-Ass_51_71C0R_30G","DPANN_Halophile_DAL-WCL_22_55C1R_61G","DPANN_Halophile_DAL-WCL_25_59C5R_48G","DPANN_Halophile_DAL-WCL_45_78C1R_74G","DPANN_Halophile_DAL-WCL_45_84C1R_91G","DPANN_Halophile_Nanosalinales_GB_GCA_000220355__s__Nanosalinarum_sp000220355_86G","DPANN_Halophile_Nanosalinales_GB_GCA_000220375__s__Nanosalina_sp000220375_87G","DPANN_Halophile_Nanosalinales_GB_GCA_001563875__s__B1Br10U2g19_sp001563875_83G","DPANN_Halophile_Nanosalinales_GB_GCA_001563915__s__B1Br10U2g21_sp001563915_87G","DPANN_Halophile_Nanosalinales_GB_GCA_001563995__s__PLBr10U2g16_sp001563995_72G","DPANN_Halophile_Nanosalinales_GB_GCA_001564145__s__B1Br10U2g21_sp001564145_71G","DPANN_Halophile_Nanosalinales_GB_GCA_001761425__s__SG9_sp001761425_95G","DPANN_Halophile_Nanosalinales_GB_GCA_003009795__s__SW7431_sp003009795_91G","Eurys_Halophile_DAL-9Gt_70_90C3R_102G","Eurys_Halophile_DAL-WCL_40_62C4R_60G","Eurys_Halophile_DAL-WCL_43_77C4R_73G","Eurys_Halophile_DAL-WCL_46_54C5R_61G","Eurys_Halophile_DAL-WCL_na_97C3R_123G","Eurys_Halophile_Halobacteriales_GB_GCA_000415985__s__Haloquadratum_walsbyi_B_115G","Eurys_Halophile_Halobacteriales_GB_GCA_002503845__s__UBA12382_sp002503845_114G","Eurys_Halophile_Halobacteriales_GB_GCA_003021725__s__QH86426_sp003021725_119G","Eurys_Halophile_Halobacteriales_GB_GCA_003022865__s__SW77133_sp003022865_93G","Eurys_Halophile_Halobacteriales_RS_GCF_000022205__s__Halorubrum_lacusprofundi_119G","Eurys_Halophile_Halobacteriales_RS_GCF_000026045__s__Natronomonas_pharaonis_124G","Eurys_Halophile_Halobacteriales_RS_GCF_000172995__s__Halogeometricum_borinquense_125G","Eurys_Halophile_Halobacteriales_RS_GCF_000196895__s__Halalkalicoccus_jeotgali_119G","Eurys_Halophile_Halobacteriales_RS_GCF_000217715__s__Halopiger_xanaduensis_124G","Eurys_Halophile_Halobacteriales_RS_GCF_000328685__s__Natronococcus_occultus_125G","Eurys_Halophile_Halobacteriales_RS_GCF_000336775__s__Haloferax_gibbonsii_125G","Eurys_Halophile_Halobacteriales_RS_GCF_000337515__s__Halovivax_asiaticus_123G","Eurys_Halophile_Halobacteriales_RS_GCF_000337775__s__Haloarcula_vallismortis_121G","Eurys_Halophile_Halobacteriales_RS_GCF_000755225__s__Halapricum_salinum_122G","Eurys_Halophile_Halobacteriales_RS_GCF_001011115__s__Halanaeroarchaeum_sulfurireducens_124G","Eurys_Halophile_Halobacteriales_RS_GCF_002844195__s__Halogranum_sp002844195_124G","Eurys_Halophile_Halobacteriales_RS_GCF_900100385__s__Halovenus_aranensis_123G","Eurys_Halophile_Halobacteriales_RS_GCF_900107665__s__Haloplanus_vescus_121G","Eurys_Halophile_Halobacteriales_RS_GCF_900108505__s__Halopenitus_malekzadehii_120G","Eurys_Halophile_Halobacteriales_RS_GCF_900110215__s__Halorientalis_persicus_123G","Eurys_Halophile_Halobacteriales_RS_GCF_900115675__s__Halolamina_pelagica_121G","Eurys_Halophile_Halobacteriales_RS_GCF_900129775__s__Halobaculum_gomorrense_121G","Eurys_Halophile_Halobacteriales_RS_GCF_900156425__s__Haladaptatus_litoreus_123G","Eurys_Halophile_Halobacteriales_RS_GCF_900215575__s__Natronoarchaeum_philippinense_122G","Eurys_Halophile_Methanonatronarchaeales_GB_GCA_001914405__s__Methanohalarchaeum_thermophilum_128G","Eurys_Halophile_Methanonatronarchaeales_RS_GCF_002153915__s__Methanonatronarchaeum_thermophilum_126G"]
NonHalos_headers = ["Agard_LC2_GB_GCA_002728275__s__GCA2728275_sp002728275_85G","Agard_LCB4_GB_GCA_001940665__s__LCB4_sp001940665_122G","Agard_Thorarchaeales_GB_GCA_001563325__s__SMTZ183_sp001563325_107G","Agard_Thorarchaeales_GB_GCA_001940705__s__AB25_sp001940705_107G","Asgard_B3JM08_GB_GCA_003144275__s__B3JM08_sp003144275_99G","DPANN_0140203016_GB_GCA_002779075__s__0140203016_sp002779075_64G","DPANN_Aenigmarchaeales_GB_GCA_000405245__s__Aenigmarchaeum_subterraneum_41G","DPANN_Altiarchaeales_GB_GCA_001873845__s__Altiarchaeum_sp001873845_119G","DPANN_CG07land_GB_GCA_002779595__s__CG07land_sp002779595_76G","DPANN_CG1023814_GB_GCA_002254545__s__EX4484224_sp002254545_60G","DPANN_EX448452_GB_GCA_002254415__s__EX448452_sp002254415_65G","DPANN_GW2011AR5_GB_GCA_002688965__s__GCA2688965_sp002688965_78G","DPANN_GW2011AR5_UBA10154__s__GW2011AR5_sp10154u_genomic_81G","DPANN_Halophile_BrettBaker_AB_03_bin_104_98G","DPANN_Halophile_BrettBaker_AB_hybrid_119G","DPANN_Halophile_BrettBaker_AB_hybrid_2_115G","DPANN_Huberarchaeales_GB_GCA_002789275__s__Huberarchaeum_crystalense_65G","DPANN_IMC4_GB_GCA_001742785__s__IMC4_sp001742785_111G","DPANN_Iainarchaeales_GB_GCA_000402355__s__Iainarchaeum_andersonii_98G","DPANN_Iainarchaeales_GB_GCA_000830275__s__GW2011AR10_sp000830275_99G","DPANN_Iainarchaeales_GB_GCA_002779065__s__0140203412_sp002779065_84G","DPANN_Micrarchaeales_GB_GCA_002501775__s__UBA581_sp002501775_85G","DPANN_Micrarchaeales_UBA8261__s__UBA12276_sp8261u_genomic_77G","DPANN_Nanoarchaeales_GB_GCA_000008085__s__Nanoarchaeum_equitans_79G","DPANN_Nanoarchaeales_GB_GCA_001552015__s__Nanopusillus_acidilobi_73G","DPANN_PEZQ01_GB_GCA_002763265__s__PEZQ01_sp002763265_89G","DPANN_Pacearchaeales_GB_GCA_001872185__s__CG1023221_sp001872185_61G","DPANN_Pacearchaeales_GB_GCA_001872315__s__CG1023914_sp001872315_59G","DPANN_Pacearchaeales_GB_GCA_002688165__s__ARS1285_sp002688165_57G","DPANN_Pacearchaeales_GB_GCA_002762735__s__GW2011AR1_sp002762735_63G","DPANN_Pacearchaeales_GB_GCA_002763035__s__PFDC01_sp002763035_62G","DPANN_Pacearchaeales_GB_GCA_002763115__s__CG1023127_sp002763115_68G","DPANN_Pacearchaeales_UBA10106__s__UBA12030_sp10106u_genomic_65G","DPANN_Parvarchaeales_GB_GCA_002412085__s__Parvarchaeum_acidophilus_73G","DPANN_SCGCAAA011G17_GB_GCA_002505585__s__UBA489_sp002505585_70G","DPANN_SCGCAAA011G17_GB_GCA_002687185__s__GCA2687185_sp002687185_62G","DPANN_SCGCAAA011G17_GB_GCA_002688095__s__GCA2688095_sp002688095_64G","DPANN_SCGCAAA011G17_UBA10136__s__GW2011AR17_sp10136u_genomic_75G","DPANN_SCGCAAA252I15_GB_GCA_002254565__s__EX44842_sp002254565_122G","DPANN_UBA10117_UBA10117__s__ARS21_sp002686215_genomic_77G","DPANN_UBA10214_UBA10161__s__1140104529_sp002778455_genomic_104G","DPANN_UBA10214_UBA10214__s__CG1024740_sp001871475_genomic_98G","DPANN_UBA543_GB_GCA_002502135__s__UBA543_sp002502135_91G","DPANN_UBA543_GB_GCA_002687935__s__UBA55_sp002687935_91G","DPANN_UBA583_GB_GCA_002505525__s__UBA431_sp002505525_69G","DPANN_UBA8480_GB_GCA_001871595__s__UBA97_sp001871595_99G","DPANN_UBA8480_GB_GCA_002792915__s__UBA93_sp002792915_86G","DPANN_WORSM1SCG_GB_GCA_001723855__s__WORSM1SCG_sp001723855_95G","DPANN_Woesearchaeales_GB_GCA_002505945__s__UBA119_sp002505945_77G","DPANN_Woesearchaeales_GB_GCA_002688265__s__GCA2688265_sp002688265_68G","DPANN_Woesearchaeales_GB_GCA_002762845__s__PCYB01_sp002762845_73G","DPANN_Woesearchaeales_GB_GCA_002867475__s__BM511_sp002867475_90G","DPANN_Woesearchaeales_UBA10107__s__UBA10107_sp10107u_genomic_60G","DPANN_Woesearchaeales_UBA12459__s__UBA9642_sp12459u_genomic_78G","DPANN_Woesearchaeales_UBA9638__s__UBA11716_sp9638u_genomic_101G","Eurys_ANME1_GB_GCA_003194435__s__G60ANME1_sp003194435_113G","Eurys_Acidiprofundales_RS_GCF_000327505__s__Aciduliprofundum_sp000327505_124G","Eurys_Archaeoglobales_RS_GCF_000008665__s__Archaeoglobus_fulgidus_133G","Eurys_Archaeoglobales_RS_GCF_000025505__s__Ferroglobus_placidus_134G","Eurys_Archaeoglobales_RS_GCF_000385565__s__Archaeoglobus_A_sulfaticallidus_134G","Eurys_Bog38_GB_GCA_003139855__s__Bog38_sp003139855_130G","Eurys_Hadarchaeales_GB_GCA_001515185__s__DG33_sp001515185_94G","Eurys_Hadarchaeales_GB_GCA_001515205__s__Hadarchaeum_yellowstonense_116G","Eurys_Halophile_GCA_009889625_111G","Eurys_Halophile_GCA_009889685_95G","Eurys_Hydrothermarchaeales_GB_GCA_002897955__s__BMS3B_sp002897955_132G","Eurys_Hydrothermarchaeales_GB_GCA_003230355__s__SZUA236_sp003230355_113G","Eurys_MGIII_GB_GCA_002509165__s__UBA8886_sp002509165_108G","Eurys_MGIII_GB_GCA_002724775__s__CGEpi1_sp002724775_98G","Eurys_Methanobacteriales_GB_GCA_002839705__s__UBA349_sp002839705_127G","Eurys_Methanobacteriales_GB_GCA_003166335__s__Bog22_sp003166335_127G","Eurys_Methanobacteriales_RS_GCF_000012545__s__Methanosphaera_stadtmanae_126G","Eurys_Methanobacteriales_RS_GCF_000166095__s__Methanothermus_fervidus_128G","Eurys_Methanobacteriales_RS_GCF_900109595__s__Methanobrevibacter_A_gottschalkii_126G","Eurys_Methanocellales_GB_GCA_002495885__s__UBA148_sp002495885_128G","Eurys_Methanococcales_RS_GCF_000018485__s__Methanococcus_maripaludis_C_130G","Eurys_Methanococcales_RS_GCF_000091665__s__Methanocaldococcus_jannaschii_128G","Eurys_Methanofastidiosales_GB_GCA_001587575__s__Methanofastidiosum_sp001587575_119G","Eurys_Methanofastidiosales_GB_GCA_001587675__s__Methanofastidiosum_sp001587675_106G","Eurys_Methanomassiliicoccales_GB_GCA_002497075__s__UBA472_sp002497075_125G","Eurys_Methanomassiliicoccales_GB_GCA_002502965__s__RumEnM2_sp002502965_126G","Eurys_Methanomassiliicoccales_GB_GCA_002504405__s__UBA71_sp002504405_126G","Eurys_Methanomassiliicoccales_RS_GCF_000404225__s__Methanomassiliicoccus_A_intestinalis_129G","Eurys_Methanomicrobiales_GB_GCA_002496395__s__Methanocalculus_sp002496395_129G","Eurys_Methanomicrobiales_GB_GCA_002839645__s__Methanoculleus_sp002839645_130G","Eurys_Methanomicrobiales_RS_GCF_000235685__s__Methanolinea_tarda_129G","Eurys_Methanomicrobiales_RS_GCF_000243255__s__Methanoplanus_limicola_129G","Eurys_Methanomicrobiales_RS_GCF_000327485__s__Methanoregula_formicica_128G","Eurys_Methanomicrobiales_RS_GCF_003173335__s__Methanospirillum_stamsii_127G","Eurys_Methanopyrales_GB_GCA_000007185__s__Methanopyrus_kandleri_131G","Eurys_Methanosarcinales_GB_GCA_003194445__s__UBA203_sp003194445_125G","Eurys_Methanosarcinales_RS_GCF_000196655__s__Methanohalobium_evestigatum_132G","Eurys_Methanosarcinales_RS_GCF_000711905__s__Methermicoccus_shengliensis_129G","Eurys_Methanosarcinales_RS_GCF_001889405__s__Methanohalophilus_halophilus_133G","Eurys_Methanosarcinales_UBA10536__s__UBA10536_sp10536u_genomic_101G","Eurys_Methanotrichales_RS_GCF_000204415__s__Methanothrix_soehngenii_126G","Eurys_NRA6_UBA8915__s__UBA10521_sp8915u_genomic_111G","Eurys_Poseidoniales_GB_GCA_002505495__s__UBA59_sp002505495_98G","Eurys_Poseidoniales_GB_GCA_002698145__s__MGIIaL2_sp002698145_99G","Eurys_RBG166812_GB_GCA_001800825__s__RBG166812_sp001800825_127G","Eurys_SG85_GB_GCA_002496385__s__UBA147_sp002496385_106G","Eurys_SW106926_GB_GCA_003009755__s__SW106926_sp003009755_116G","Eurys_Syntrophoarchaeales_GB_GCA_001766815__s__Syntrophoarchaeum_caldarius_120G","Eurys_Thermococcales_RS_GCF_000195935__s__Pyrococcus_abyssi_129G","Eurys_Thermococcales_RS_GCF_002214365__s__Thermococcus_celer_124G","Eurys_Thermoplasmatales_GB_GCA_001856825__s__GCA001856825_sp001856825_119G","Eurys_Thermoplasmatales_GB_GCA_002498845__s__UBA509_sp002498845_117G","Eurys_UBA10834_GB_GCA_001800815__s__COMBO5621_sp001800815_118G","Eurys_UBA184_GB_GCA_002503985__s__UBA184_sp002503985_114G","Eurys_UBA186_GB_GCA_002494765__s__UBA186_sp002494765_114G","Eurys_UBA287_GB_GCA_002495235__s__UBA287_sp002495235_75G","Eurys_UBA9212_GB_GCA_002838935__s__GCA002838935_sp002838935_116G","Eurys_UBA9212_UBA9212__s__GCA002838935_sp002838935_genomic_99G","TACK_B24_GB_GCA_001593865__s__B24_sp001593865_114G","TACK_B25_GB_GCA_002011035__s__JdFR11_sp002011035_129G","TACK_B261_GB_GCA_003164295__s__BOG990_sp003164295_115G","TACK_Caldiarchaeales_GB_GCA_000270325__s__Caldiarchaeum_subterraneum_117G","TACK_Caldiarchaeales_GB_GCA_003056285__s__NZ13MG1_sp003056285_118G","TACK_Desulfurococcales_GB_GCA_000145985__s__Ignisphaera_aggregans_123G","TACK_Desulfurococcales_GB_GCA_002899805__s__ARK14_sp002899805_100G","TACK_Desulfurococcales_RS_GCF_000264495__s__Thermogladius_calderae_111G","TACK_Desulfurococcales_RS_GCF_000317795__s__Caldisphaera_lagunensis_117G","TACK_EX4484205_GB_GCA_002255045__s__EX4484205_sp002255045_107G","TACK_EX44842171_GB_GCA_002254745__s__EX44842171_sp002254745_87G","TACK_Geoarchaeales_GB_GCA_000380705__s__SCGCAAA471B05_sp000380705_105G","TACK_Ignicoccales_RS_GCF_000017945__s__Ignicoccus_A_hospitalis_126G","TACK_JDFR14_GB_GCA_002011085__s__JDFR14_sp002011085_116G","TACK_Korarchaeales_RS_GCF_000019605__s__Korarchaeum_cryptofilum_117G","TACK_Marsarchaeales_GB_GCA_003019535__s__ECHB1_sp003019535_113G","TACK_Methanomethyliales_GB_GCA_001717015__s__Methanosuratus_petracarbonis_95G","TACK_Methanomethyliales_GB_GCA_001717035__s__Methanomethylicus_mesodigestum_127G","TACK_Nitrososphaerales_GB_GCA_000730285__s__Nitrososphaera_evergladensis_123G","TACK_Nitrososphaerales_GB_GCA_003164815__s__BOG1369_sp003164815_114G","TACK_Nitrososphaerales_GB_GCA_900248165__s__Nitrosocaldus_cavascurensis_122G","TACK_Nitrososphaerales_RS_GCF_000956175__s__Nitrosopumilus_adriaticus_124G","TACK_Nitrososphaerales_RS_GCF_900143675__s__Nitrosotalea_sp900143675_124G","TACK_Sulfolobales_GB_GCA_000508305__s__Sulfolobus_acidocaldarius_A_128G","TACK_Sulfolobales_RS_GCF_001316085__s__Sulfolobus_B_sp001316085_123G","TACK_TCS64_GB_GCA_001774245__s__UBA8941_sp001774245_96G","TACK_TCS64_GB_GCA_002726865__s__GCA2726865_sp002726865_116G","TACK_Thermofilales_RS_GCF_000813245__s__Thermofilum_carboxyditrophus_105G","TACK_Thermoproteales_GB_GCA_000019805__s__Pyrobaculum_neutrophilum_124G","TACK_Thermoproteales_RS_GCF_000018305__s__Caldivirga_maquilingensis_122G","TACK_UBA164_GB_GCA_002499005__s__UBA164_sp002499005_96G"]

# Add the headers to the dataframes
Halos_align_sites_removed_df.index = Halos_headers
NonHalos_align_sites_removed_df.index = NonHalos_headers

# Combine the two data frames and export to a csv
Halos_and_NonHalos_dfs = [Halos_align_sites_removed_df, NonHalos_align_sites_removed_df]
Halos_and_NonHalos_dfs_concat = pd.concat(Halos_and_NonHalos_dfs)
Halos_and_NonHalos_dfs_concat.to_csv("NM_20perc_sites_removed.csv", sep = ",")

# Make fasta file
#### perl script df2faa.pl
